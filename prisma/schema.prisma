generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                    @id @default(uuid())
  name                      String?
  number                    String?
  bio                       String?                   // NEW FIELD
  website                   String?                   // NEW FIELD
  location                  String?                   // NEW FIELD
  profile_picture           String?
  joined_at                 DateTime                  @default(now())
  role                      String?
  qualifications            String?
  rating                    Int?
  followers                 Int?
  following                 Int?
  timezone                  String?
  phone_extension           String?
  username                  String                    @unique
  email                     String                    @unique
  githubAccessToken         String?
  githubAvatar              String?
  githubUsername            String?
  githubRefreshToken        String?
  assignedKanbanTasks       KanbanTask[]              @relation("TaskAssignee")
  modifiedKanbanTasks       KanbanTask[]              @relation("TaskLastModifiedBy")
  notifications             Notification[]
  organizations             OrganizationMember[]
  ownedProjects             Project[]                 @relation("ProjectOwner")
  projectMemberships        ProjectMember[]
  skills                    UserSkill[]
  projects                  Project[]                 @relation("UserProjects")
  programmingLanguages      UserProgrammingLanguage[]
  organizedCalendarEvents   CalendarEvent[]           @relation("OrganizerCalendarEvents")
  calendarEventParticipants CalendarEventParticipant[] @relation("CalendarEventParticipants")
  assignedCalendarEvents    CalendarEvent[]           @relation("AssignedCalendarEvents")
  interests                 UserInterest[]            // NEW MANY-TO-MANY relation for interests

    // Added relations for Chat
  chatRoomParticipants ChatRoomParticipant[] @relation("UserChatRoomParticipants")
  chatMessages         ChatMessage[]         @relation("UserChatMessages")
}

model UserProgrammingLanguage {
  userId     String
  languageId String
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  language   ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
}

model ProgrammingLanguage {
  id       String                    @id @default(uuid())
  name     String                    @unique
  users    UserProgrammingLanguage[]
  projects Project[]                 @relation("ProjectLanguages")
}

model Skill {
  id           String         @id @default(uuid())
  name         String         @unique
  isCustom     Boolean        @default(false)
  users        UserSkill[]
  ProjectSkill ProjectSkill[]
}

model UserSkill {
  userId  String
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
}

model Interest {
  id    String        @id @default(uuid())
  name  String        @unique
  users UserInterest[]
}

model UserInterest {
  userId     String
  interestId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@id([userId, interestId])
}

model Organization {
  id              String               @id @default(uuid())
  name            String
  slug            String               @unique
  phone_extension String?
  number          String?
  logo            String?
  industry        String?
  location        String?
  timezone        String?
  createdAt       DateTime             @default(now())
  members         OrganizationMember[]
  projects        Project[]
}

model OrganizationMember {
  userId         String
  organizationId String
  role           String
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

model Project {
  id             String          @id @default(uuid())
  title          String
  description    String
  ownerId        String
  budget         Float?
  bannerImage    String?
  deadline       DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  email          String
  organizationId String?
  projectType    String
  githubRepo     String?
  kanbanBoard    KanbanBoard?
  kanbanTasks    KanbanTask[]
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members        ProjectMember[]
  projectMembers User[]          @relation("UserProjects")
  languages      ProgrammingLanguage[] @relation("ProjectLanguages")
  skillsRequired ProjectSkill[]
  certificateEligible  Boolean?    @default(false)
  calendarEvents CalendarEvent[] @relation("ProjectCalendarEvents")
    // Added relation for Chat rooms linked to this project.
  chatRooms ChatRoom[] @relation("ProjectChatRooms")
  
}

model ProjectSkill {
  projectId String
  skillId   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([projectId, skillId])
}

model ProjectMember {
  userId    String
  projectId String
  joinedAt  DateTime         @default(now())
  id        String           @id @default(uuid())
  role      ProjectRole
  status    MembershipStatus @default(PENDING)
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "userId_projectId")
}

model Notification {
  id              String   @id @default(uuid())
  userId          String
  createdAt       DateTime @default(now())
  read            Boolean  @default(false)
  message         String
  type            String?
  projectId       String?
  projectMemberId String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KanbanBoard {
  id        String         @id @default(uuid())
  projectId String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns   KanbanColumn[]
}

model KanbanColumn {
  id        String       @id @default(uuid())
  title     String
  color     String
  order     Int
  boardId   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  board     KanbanBoard? @relation(fields: [boardId], references: [id])
  tasks     KanbanTask[]
}

model KanbanTask {
  id                String       @id @default(uuid())
  content           String
  priority          String
  dueDate           DateTime?
  tags              String[]
  columnId          String
  projectId         String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  assigneeId        String?
  position          Int
  assignee          User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  column            KanbanColumn @relation(fields: [columnId], references: [id])
  project           Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lastModifiedByUser User?       @relation("TaskLastModifiedBy", fields: [lastModifiedBy], references: [id])
  lastModifiedBy    String?
}

model CalendarEvent {
  id                    String                       @id @default(uuid())
  title                 String
  description           String?
  startTime             DateTime
  endTime               DateTime
  location              String?
  recurrence            String?
  reminderMinutesBefore Int?
  organizerId           String
  projectId             String?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  organizer             User                         @relation("OrganizerCalendarEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  project               Project?                     @relation("ProjectCalendarEvents", fields: [projectId], references: [id], onDelete: Cascade)
  participants          CalendarEventParticipant[]
  assignedToId          String?
  assignedTo            User?                        @relation("AssignedCalendarEvents", fields: [assignedToId], references: [id], onDelete: SetNull)
  priority              String?
  deadline              DateTime?
  @@index([organizerId])
  @@index([projectId])
}

model CalendarEventParticipant {
  eventId   String
  userId    String
  event     CalendarEvent   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User            @relation("CalendarEventParticipants", fields: [userId], references: [id], onDelete: Cascade)
  @@id([eventId, userId])
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REJECTED
}

enum ProjectRole {
  OWNER
  ADMINISTRATOR
  MEMBER
}


enum ChatRoomType {
  PRIVATE
  PROJECT
  GROUP
}

model ChatRoom {
  id           String            @id @default(uuid())
  roomType     ChatRoomType
  projectId    String?
  participants ChatRoomParticipant[]
  messages     ChatMessage[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relation with Project (only used when roomType is PROJECT)
  project      Project?          @relation("ProjectChatRooms", fields: [projectId], references: [id])
}

model ChatRoomParticipant {
  roomId String
  userId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user   User     @relation("UserChatRoomParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@id([roomId, userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  roomId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation("UserChatMessages", fields: [senderId], references: [id], onDelete: Cascade)
}
