generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                    @id @default(uuid())
  name                 String?
  number               String?
  profile_picture      String?
  joined_at            DateTime                  @default(now())
  role                 String?
  interests            String?
  qualifications       String?
  rating               Int?
  timezone             String?
  phone_extension      String?
  username             String                    @unique
  email                String                    @unique
  githubAccessToken    String?
  githubAvatar         String?
  githubUsername       String?
  githubRefreshToken   String?
  assignedKanbanTasks  KanbanTask[]
  notifications        Notification[]
  organizations        OrganizationMember[]
  ownedProjects        Project[]                 @relation("ProjectOwner")
  projectMemberships   ProjectMember[]
  skills               UserSkill[]
  projects             Project[]                 @relation("UserProjects")
  programmingLanguages UserProgrammingLanguage[]
}

model UserProgrammingLanguage {
  userId     String
  languageId String
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  language   ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
}

model ProgrammingLanguage {
  id       String                    @id @default(uuid())
  name     String                    @unique
  users    UserProgrammingLanguage[]
  projects Project[]                 @relation("ProjectLanguages")
}

model Skill {
  id       String      @id @default(uuid())
  name     String      @unique
  isCustom Boolean     @default(false)
  users    UserSkill[]
  projects Project[] // ✅ Many-to-Many, No need for @relation()
}

model UserSkill {
  userId  String
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
}

model Organization {
  id              String               @id @default(uuid())
  name            String
  slug            String               @unique
  phone_extension String?
  number          String?
  logo            String?
  industry        String?
  location        String?
  timezone        String?
  createdAt       DateTime             @default(now())
  members         OrganizationMember[]
  projects        Project[]
}

model OrganizationMember {
  userId         String
  organizationId String
  role           String
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

model Project {
  id             String          @id @default(uuid())
  title          String
  description    String
  ownerId        String
  budget         Float?
  deadline       DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  email          String
  organizationId String?
  projectType    String
  githubRepo     String?
  kanbanBoard    KanbanBoard?
  kanbanTasks    KanbanTask[]
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members        ProjectMember[]
  projectMembers User[]          @relation("UserProjects")

  // ✅ Many-to-Many relation with Programming Languages (Explicit Relation Name)
  languages ProgrammingLanguage[] @relation("ProjectLanguages")
  Skill     Skill?                @relation(fields: [skillId], references: [id])
  skillId   String?
}

model ProjectMember {
  userId    String
  projectId String
  joinedAt  DateTime         @default(now())
  id        String           @id @default(uuid())
  role      ProjectRole
  status    MembershipStatus @default(PENDING)
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "userId_projectId")
}

model Notification {
  id              String   @id @default(uuid())
  userId          String
  createdAt       DateTime @default(now())
  read            Boolean  @default(false)
  message         String
  type            String?
  projectId       String?
  projectMemberId String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KanbanBoard {
  id        String         @id @default(uuid())
  projectId String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns   KanbanColumn[]
}

model KanbanColumn {
  id        String       @id @default(uuid())
  title     String
  color     String
  order     Int
  boardId   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  board     KanbanBoard? @relation(fields: [boardId], references: [id])
  tasks     KanbanTask[]
}

model KanbanTask {
  id         String       @id @default(uuid())
  content    String
  priority   String
  dueDate    DateTime?
  tags       String[]
  columnId   String
  projectId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  assigneeId String?
  position   Int
  assignee   User?        @relation(fields: [assigneeId], references: [id])
  column     KanbanColumn @relation(fields: [columnId], references: [id])
  project    Project      @relation(fields: [projectId], references: [id])
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REJECTED
}

enum ProjectRole {
  OWNER
  ADMINISTRATOR
  MEMBER
}
