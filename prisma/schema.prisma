generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String?
  number             String?
  profile_picture    String?
  joined_at          DateTime             @default(now())
  role               String?
  interests          String?
  qualifications     String?
  rating             Int?
  timezone           String?
  phone_extension    String?
  username           String               @unique
  email              String               @unique
  organizations      OrganizationMember[]
  projects           Project[]            @relation("UserProjects")
  projectMemberships ProjectMember[]
  skills             UserSkill[]
  ownedProjects      Project[]            @relation("ProjectOwner")
  notifications      Notification[]
  assignedKanbanTasks KanbanTask[]
  
  // New GitHub fields:
  githubAccessToken  String?
  githubRefreshToken String?   // <-- Make sure this is here!
  githubUsername     String?
  githubAvatar       String?
}


model Skill {
  id       String      @id @default(uuid())
  name     String      @unique
  isCustom Boolean     @default(false)
  users    UserSkill[]
}

model UserSkill {
  userId  String
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
}

model Organization {
  id              String               @id @default(uuid())
  name            String
  slug            String               @unique
  phone_extension String?
  number          String?
  logo            String?
  industry        String?
  location        String?
  timezone        String?
  createdAt       DateTime             @default(now())
  members         OrganizationMember[]
  projects        Project[]
}

model OrganizationMember {
  userId         String
  organizationId String
  role           String
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

model Project {
  id                  String          @id @default(uuid())
  title               String
  description         String
  ownerId             String
  skillsRequired      String[]
  budget              Float?
  deadline            DateTime
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  bannerImage         String?
  certificateEligible Boolean         @default(false)
  email               String
  languages           String[]
  organizationId      String?
  githubRepo          String? 
  projectType         String
  organization        Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner               User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members             ProjectMember[]
  projectMembers      User[]          @relation("UserProjects")
  kanbanBoard KanbanBoard?
  kanbanTasks KanbanTask[]
}

model ProjectMember {
  id        String      @id @default(uuid())
  userId    String
  projectId String
  role      ProjectRole
  status    MembershipStatus @default(PENDING)
  joinedAt  DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "userId_projectId")
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REJECTED
}

enum ProjectRole {
  OWNER
  ADMINISTRATOR
  MEMBER
}


model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  type      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId       String?  // link to the project
  projectMemberId String?  // link to the ProjectMember row
}








model KanbanBoard {
  id        String         @id @default(uuid())
  project   Project        @relation(fields: [projectId], references: [id])
  projectId String         @unique
  columns   KanbanColumn[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model KanbanColumn {
  id           String       @id @default(uuid())
  title        String
  color        String
  order        Int
  board        KanbanBoard? @relation(fields: [boardId], references: [id])
  boardId      String?
  tasks        KanbanTask[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model KanbanTask {
  id           String       @id @default(uuid())
  content      String
  priority     String
  dueDate      DateTime?
  tags         String[]
  position     Int          // This is the ordering field for tasks
  column       KanbanColumn @relation(fields: [columnId], references: [id])
  columnId     String
  project      Project      @relation(fields: [projectId], references: [id])
  projectId    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assigneeId   String?
  assignee     User?        @relation(fields: [assigneeId], references: [id])
}





